<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * NewDirectory controller tests
 *
 * @package NokiaUpload
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class NokiaUploadNewDirectoryControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'nokiaupload.NewDirectory');
	}

	public function setUp() {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}
		global $gallery;

		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_album);

		list($ret, $this->_group) = $this->_createRandomGroup();

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_group);

		$ret = GalleryCoreApi::addGroupPermission(
			$this->_album->getId(),
			$this->_group->getId(),
			'core.addAlbumItem'
		);

		if ($ret) {
			return $ret;
		}
		list($ret, $this->_user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_user);

		$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());

		if ($ret) {
			return $ret;
		}

		$ret = $this->_markPluginParametersForCleanup('module', 'nokiaupload');

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::setPluginParameter(
			'module',
			'nokiaupload',
			'id.mobileGroup',
			$this->_group->getId()
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::setPluginParameter(
			'module',
			'nokiaupload',
			'id.uploadAlbum',
			$this->_album->getId()
		);

		if ($ret) {
			return $ret;
		}
		$_SERVER['HTTP_USER_AGENT'] = 'Nokia6630/1.0 (2.39.129) Series60/2.6 Profile/MIDP-2.0';
	}

	public function testNewDirectoryController() {
		global $gallery;

		// Login our test user
		$gallery->setActiveUser($this->_user);

		$session =& $gallery->getSession();
		$session->remove('permissionCache');
		$ret = GalleryCoreApi::assertHasItemPermission($this->_getRootId(), 'core.addAlbumItem');

		if (!$ret) {
			return $this->assert(false, 'expected test user to not have addAlbum access in root');
		}

		// Invalid parent
		GalleryUtilities::putRequestVariable('DirName', 'test', false);
		GalleryUtilities::putRequestVariable('Pid', 'badID', false);
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'nokiaupload.NewDirectory',
				),
				'status'   => array(
					'success' => NOKIAUPLOAD_ERR_DIRCREATE,
				),
				'error'    => array(),
			),
			$results,
			'bad parent'
		);

		// Parent with no permission
		GalleryUtilities::putRequestVariable('DirName', 'test', false);
		GalleryUtilities::putRequestVariable('Pid', $this->_getRootId(), false);
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'nokiaupload.NewDirectory',
				),
				'status'   => array(
					'success' => NOKIAUPLOAD_ERR_DIRCREATE,
				),
				'error'    => array(),
			),
			$results,
			'no permission parent'
		);

		// Valid request using default parent
		GalleryUtilities::putRequestVariable('DirName', '"test" $album! (title)', false);
		GalleryUtilities::putRequestVariable('DirDesc', 'this is the description', false);
		GalleryUtilities::removeRequestVariable('Pid', false);
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'view' => 'nokiaupload.NewDirectory',
			),
			$results['delegate'],
			'delegate'
		);
		$this->assertEquals(array(), $results['error'], 'error');
		$this->assertEquals(NOKIAUPLOAD_ERR_NOERR, $results['status']['success'], 'success');
		$this->assert($results['status']['id'] > 0, 'new album id');

		$ret = GalleryCoreApi::assertHasItemPermission($results['status']['id'], 'core.all');
		$this->assert(!$ret, 'user should have core.all permission on new album');

		list($ret, $album) = GalleryCoreApi::loadEntitiesById($results['status']['id'], 'GalleryAlbumItem');

		if ($ret) {
			return $ret;
		}
		$this->assert(GalleryUtilities::isA($album, 'GalleryAlbumItem'), 'item type');
		$this->assertEquals($this->_album->getId(), $album->getParentId(), 'parent');
	}
}

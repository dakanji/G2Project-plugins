<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/shutterfly/PrintPhotos.inc');

/**
 * Test ShutterflyPrintPhotos immediate view
 *
 * @package Shutterfly
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class ShutterflyPrintPhotosViewTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp() {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$this->_view = new PrintPhotosView();

		list($ret, $this->_item) = $this->_createRandomDataItem(
			$this->_getRootId(),
			'application/unknown',
			array(),
			__FILE__,
			'GalleryPhotoItem'
		);

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_item);

		list($ret, $this->_publicItem) = $this->_createRandomDataItem(
			$this->_getRootId(),
			'application/unknown',
			array(),
			__FILE__,
			'GalleryPhotoItem'
		);

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_publicItem);

		list($ret, $everybodyGroupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');

		if ($ret) {
			return $ret;
		}
		$ret = $ret = GalleryCoreApi::addGroupPermission(
			$this->_publicItem->getId(),
			$everybodyGroupId,
			'core.all'
		);

		if ($ret) {
			return $ret;
		}
	}

	public function testShutterflySesssionHasPrintServiceIds() {
		global $gallery;

		$itemId = $this->_item->getId();
		GalleryUtilities::putRequestVariable('itemId', $itemId);
		GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

		// We only have permission to print and view the thumbnail
		$ret = GalleryCoreApi::removeItemPermissions($itemId);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission(
			$itemId,
			$gallery->getActiveUserId(),
			'shutterfly.print'
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission(
			$itemId,
			$gallery->getActiveUserId(),
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		ob_start();
		$ret     = $this->_view->renderImmediate(array(), array());
		$results = ob_get_contents();
		ob_end_clean();

		if ($ret) {
			return $ret;
		}

		// Grab session we provide for the raw image
		$session    =& $gallery->getSession();
		$sessionVar = GalleryUtilities::prefixFormVariable($session->getKey());
		preg_match_all("/imraw-1.*?$sessionVar=([0-9a-f]*)/", $results, $matches);
		$shutterflySessionId = $matches[1][0];

		$_COOKIE[SESSION_ID_PARAMETER] = $shutterflySessionId;
		$shutterflySession             = new GallerySession();
		$ret                           = $shutterflySession->init();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array($itemId),
			$shutterflySession->get('core.isPrintService'),
			'Shutterfly session missing item id'
		);
	}

	public function testShutterflySessionPermissionsForSessionBasedPermissions() {
		// See bug 1706657
		global $gallery;
		$session =& $gallery->getSession();

		$itemId       = $this->_item->getId();
		$publicItemId = $this->_publicItem->getId();
		GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');
		$session->put(
			'shutterfly.cart',
			array(
				$itemId       => 1,
				$publicItemId => 1,
			)
		);

		$ret = GalleryCoreApi::removeItemPermissions($itemId);

		if ($ret) {
			return $ret;
		}

		// Give the active user view permissions through session-basd permissions
		$sessionPermissionEntityId = $itemId;
		$session->put(GALLERY_PERMISSION_SESSION_KEY, array($sessionPermissionEntityId));

		$ret = GalleryCoreApi::addEntityPermission(
			$itemId,
			$sessionPermissionEntityId,
			'shutterfly.print'
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addEntityPermission(
			$itemId,
			$sessionPermissionEntityId,
			'core.viewAll'
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_becomeGuestUser();

		if ($ret) {
			return $ret;
		}

		ob_start();
		$ret     = $this->_view->renderImmediate(array(), array());
		$results = ob_get_contents();
		ob_end_clean();

		if ($ret) {
			return $ret;
		}

		// Grab session we provide for the raw image
		$session    =& $gallery->getSession();
		$sessionVar = GalleryUtilities::prefixFormVariable($session->getKey());
		$matched    = preg_match_all("/imraw-1.*?$sessionVar=([0-9a-f]*)/", $results, $matches);

		if (!$matched) {
			$this->fail('No shutterfly session found in generated HTML');
		} else {
			$shutterflySessionId = $matches[1][0];

			$_COOKIE[SESSION_ID_PARAMETER] = $shutterflySessionId;
			$shutterflySession             = new GallerySession();
			$ret                           = $shutterflySession->init();

			if ($ret) {
				return $ret;
			}

			$this->assertEquals(
				array($itemId),
				$shutterflySession->get('core.isPrintService'),
				'Shutterfly session missing item id'
			);
		}
	}
}

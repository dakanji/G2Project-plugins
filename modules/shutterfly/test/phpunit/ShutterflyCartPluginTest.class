<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test Shutterfly cart plugin
 *
 * @package Shutterfly
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ShutterflyCartPluginTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp() {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Create some random photo items that we can print
		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_album);

		$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_album->getId(),
			$gallery->getActiveUserId(),
			'core.all'
		);

		if ($ret) {
			return $ret;
		}

		for ($i = 0; $i < 3; $i++) {
			list($ret, $this->_items[$i]) = $this->_createRandomDataItem(
				$this->_album->getId(),
				'test/jpeg',
				array(),
				__FILE__,
				'GalleryPhotoItem'
			);

			if ($ret) {
				return $ret;
			}
		}

		// Print permission on all but one
		$ret = GalleryCoreApi::removeUserPermission(
			$this->_items[1]->getId(),
			$gallery->getActiveUserId(),
			'shutterfly.print'
		);

		if ($ret) {
			return $ret;
		}
		// Public view permission on one
		list($ret, $anonymousUserId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_items[2]->getId(),
			$anonymousUserId,
			'core.viewAll'
		);

		if ($ret) {
			return $ret;
		}
		// Watermarked thumbnail for one
		for ($i = 0; $i < 3; $i++) {
			list($ret, $this->_thumbs[$i]) = $this->_createDerivative(
				$this->_items[$i],
				$this->_items[$i]->getId(),
				DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
				'test-operation|100',
				'test/jpeg',
				$i ? array() : array(
					'postFilterOperations' => 'test-watermark|yes',
				)
			);

			if ($ret) {
				return $ret;
			}
		}
	}

	public function testFulfillCart() {
		global $gallery;
		$urlGenerator =& $gallery->getUrlGenerator();
		$session      =& $gallery->getSession();

		$cartItemIds = array();

		for ($i = 0; $i < count($this->_items); $i++) {
			$cartItemIds[$this->_items[$i]->getId()] = $i + 1;
		}

		GalleryCoreApi::requireOnce('modules/cart/classes/CartPluginInterface_1_0.class');
		GalleryCoreApi::requireOnce(
			'modules/shutterfly/classes/ShutterflyCartPlugin.class'
		);
		$cartPlugin            = new ShutterflyCartPlugin();
		list($ret, $urlParams) = $cartPlugin->fulfillCart($cartItemIds);

		if ($ret) {
			return $ret;
		}
		$returnUrl = $urlGenerator->generateUrl(
			array(
				'view' => 'cart.ViewCart',
			),
			array(
				'forceFullUrl' => true,
			)
		);
		$this->assertEquals(
			array(
				'view'      => 'shutterfly.PrintPhotos',
				'returnUrl' => $returnUrl,
				'authToken' => $session->getAuthToken(),
			),
			$urlParams
		);

		$session   =& $gallery->getSession();
		$printCart = $session->get('shutterfly.cart');
		$this->assertEquals($cartItemIds, $printCart, 'cart');

		// Render PrintPhotos view to test processing of cart items
		list($ret, $view) = GalleryView::loadView('shutterfly.PrintPhotos');

		if ($ret) {
			return $ret;
		}
		GalleryUtilities::putRequestVariable('returnUrl', $returnUrl);
		ob_start();
		$ret  = $view->renderImmediate(array(), array());
		$form = ob_get_contents();
		ob_end_clean();

		if ($ret) {
			return $ret;
		}
		$this->assert(strpos($form, '"returl" value="' . $returnUrl . '"'), 'return url');
		$this->assert(
			strpos($form, '"imnum" value="4"'),
			'form should include 4 photos: qty 1 of item 0, none of item 1 ' .
			'(no print permission), qty 3 of item 2'
		);
		$this->assert(
			preg_match(
				'{"imraw-1" value="http://[^"]*'
				. $this->_items[0]->getId() . '[^"]*'
				. GalleryUtilities::prefixFormVariable($session->getKey())
				. '=([A-Za-z0-9]+)}',
				$form,
				$matches
			),
			'URL for first image should include a session id'
		);
		$this->assert(
			$matches[1] != $session->getId(),
			'session id in URL for first image should be a new id, not my session'
		);
		$this->assert(
			preg_match(
				'{"imthumb-1" value="http://[^"]*'
				. $this->_items[0]->getId() . '[^"]*'
				. GalleryUtilities::prefixFormVariable($session->getKey())
				. '=([A-Za-z0-9]+)}',
				$form,
				$matches
			),
			'URL for first thumbnail should include a session id'
			. ' and use itemId not thumbId due to watermark'
		);
		$this->assertEquals(
			$session->getId(),
			$matches[1],
			'session id in URL for first thumbnail should be my session'
		);
		$this->assert(
			preg_match(
				'{"imraw-4" value="http://[^"]*'
				. $this->_items[2]->getId() . '(?![^"]*'
				. $session->getKey() . '=)}',
				$form,
				$matches
			),
			'URL for second image should not include a session id'
		);
		$this->assert(
			preg_match(
				'{"imthumb-4" value="http://[^"]*'
				. $this->_thumbs[2]->getId() . '(?![^"]*'
				. $session->getKey() . '=)}',
				$form,
				$matches
			),
			'URL for second thumbnail should not include a session id'
		);


		$printCart = $session->get('shutterfly.cart');
		$this->assertEquals(null, $printCart, 'cart');

		// Clean up
		$session->remove('shutterfly.cart');

		if (!empty($matches[1]) && $matches[1][0] != $session->getId()) {
			$testSession             = new GallerySession();
			$testSession->_sessionId = $matches[1][0];
			$testSession->reset();
		}
	}
}

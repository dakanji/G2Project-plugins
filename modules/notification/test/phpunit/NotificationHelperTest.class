<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/notification/classes/NotificationHelper.class');
GalleryCoreApi::requireOnce('modules/notification/classes/GalleryCoreEventNotifications.class');

/**
 * NotificationHelper tests
 * @package Notification
 * @subpackage PHPUnit
 * @author Zimzat <zimzat@zimzat.com>
 * @author Tim Almdal <tnalmdal@shaw.ca>
 * @version $Revision: 18145 $
 */
class NotificationHelperTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp() {
		global $gallery;
		parent::setUp();

		list($ret, $this->_groupRegistered) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.allUserGroup');

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_groupAdmin) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');

		if ($ret) {
			return $ret;
		}

		$this->_unregisterFactoryImplementationForTest('NotificationEvent_1_0');
		$this->_unregisterFactoryImplementationForTest('NotificationHandler_1_0');

		$ret = $this->_registerFactoryImplementationForTest(
			'GalleryEventListener',
			'NotificationHelperTestEventHandler',
			'NotificationRouter',
			'modules/notification/test/phpunit/NotificationHelperTest.class',
			'notification',
			array(
				'eventName' => 'Test::Event',
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_registerFactoryImplementationForTest(
			'NotificationEvent_1_0',
			'NotificationHelperTestEvent',
			'Test::Event1',
			'modules/notification/test/phpunit/NotificationHelperTest.class',
			'notification',
			array(
				'eventName' => 'Test::Event',
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_registerFactoryImplementationForTest(
			'NotificationEvent_1_0',
			'NotificationHelperTestEvent2',
			'Test::Event2',
			'modules/notification/test/phpunit/NotificationHelperTest.class',
			'notification',
			array(
				'eventName' => 'Test::Event2',
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_registerFactoryImplementationForTest(
			'NotificationEvent_1_0',
			'NotificationHelperTestGlobalEvent',
			'Test::GlobalEvent',
			'modules/notification/test/phpunit/NotificationHelperTest.class',
			'notification',
			array(
				'eventName' => 'Test::GlobalEvent',
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_registerFactoryImplementationForTest(
			'NotificationHandler_1_0',
			'NotificationHelperTestNotificationHandler',
			'Test::EventHandler',
			'modules/notification/test/phpunit/NotificationHelperTest.class',
			'notification',
			array()
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_registerFactoryImplementationForTest(
			'NotificationHandler_1_0',
			'NotificationHelperTestNotificationHandlerNew',
			'Test:NewHandler',
			'modules/notification/test/phpunit/NotificationHelperTest.class',
			'notification',
			array(
				'Gallery::ViewableTreeChange',
				'Gallery::RemovePermission',
				'GalleryEntity::save',
				'GalleryEntity::delete',
			)
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'notification');

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_album);

		list($ret, $this->_item1) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_item2) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_user);

		list($ret, $this->_user2) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_user2);

		$ret = GalleryCoreApi::addUserPermission(
			$this->_album->getId(),
			$this->_user2->getId(),
			'core.edit'
		);

		if ($ret) {
			return $ret;
		}

		$gallery->setActiveUser($this->_user);
		$userId    = $gallery->getActiveUserId();
		list($ret) = GalleryCoreApi::getPermissions($this->_album->getId(), $userId);

		if ($ret) {
			return $ret;
		}
		list($ret) = GalleryCoreApi::getPermissions($this->_album->getId(), $this->_user2->getId());

		if ($ret) {
			return $ret;
		}

		list($ret) = GalleryCoreApi::loadEntitiesById(
			array(
				$this->_album->getId(),
				$this->_item1->getId(),
				$this->_item2->getId(),
			),
			'GalleryItem'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_rootAlbum) = GalleryCoreApi::loadEntitiesById(
			$this->_getRootId(),
			'GalleryAlbumItem'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $users) = GalleryCoreApi::loadEntitiesById($userId, 'GalleryUser');

		if ($ret) {
			return $ret;
		}

		list($ret, $childItems) = GalleryCoreApi::fetchChildItemIds($this->_album);

		if ($ret) {
			return $ret;
		}

		$entities  = array($this->_getRootId(), $this->_album->getId());
		list($ret) = GalleryCoreApi::fetchPermissionsForItems($entities, $this->_user->getId());

		if ($ret) {
			return $ret;
		}

		$this->_storageSet = true;
		$gallery->_storage = new UnitTestStorage();

		$this->_saveLockSystem = $gallery->_lockSystem;
		$gallery->_lockSystem  = null;
	}

	public function tearDown() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$gallery->_lockSystem =& $this->_saveLockSystem;

		if (!empty($this->_storageSet)) {
			$this->assert($storage->isComplete(), $storage->getRemaining());
		}

		parent::tearDown();
	}

	public function testGetDefinedEventsDisplay() {
		list($ret, $events) = NotificationHelper::getDefinedEvents(true);

		if ($ret) {
			return $ret;
		}

		$expected = array(
			'' => array(
				'global'      => false,
				'description' => $this->_module->translate('Select Event'),
			),
			'Test::Event1' => array(
				'global'      => false,
				'description' => $this->_module->translate('NotificationEventTest Description'),
			),
			'Test::Event2' => array(
				'global'      => false,
				'description' => $this->_module->translate('NotificationEventTest2 Description'),
			),
			'Test::GlobalEvent' => array(
				'global'      => true,
				'description' => $this->_module->translate('NotificationHelperTestGlobalEvent Description'),
			),
		);

		$this->assertEquals($expected, $events, 'Display');

		list($ret, $events) = NotificationHelper::getDefinedEvents();

		if ($ret) {
			return $ret;
		}

		$expected = array(
			'Test::GlobalEvent' => array(
				'global'      => true,
				'description' => $this->_module->translate('NotificationHelperTestGlobalEvent Description'),
			),
			'Test::Event2' => array(
				'global'      => false,
				'description' => $this->_module->translate('NotificationEventTest2 Description'),
			),
			'Test::Event1' => array(
				'global'      => false,
				'description' => $this->_module->translate('NotificationEventTest Description'),
			),
		);

		$this->assertEquals($expected, $events, 'Non Display');
	}

	public function testGetDefinedHandlersDisplay() {
		list($ret, $handlers) = NotificationHelper::getDefinedHandlers(true);

		if ($ret) {
			return $ret;
		}

		$expected = array(
			''                   => $this->_module->translate('Select Handler'),
			'Test:NewHandler'    => $this->_module->translate(
				'NotificationHelperTestNotificationHandler New Description'
			),
			'Test::EventHandler' => $this->_module->translate(
				'NotificationHelperTestNotificationHandler Description'
			),
		);

		$this->assertEquals($expected, $handlers, 'Display');

		list($ret, $handlers) = NotificationHelper::getDefinedHandlers();

		if ($ret) {
			return $ret;
		}

		$expected = array(
			'Test:NewHandler' => $this->_module->translate(
				'NotificationHelperTestNotificationHandler New Description'
			),
			'Test::EventHandler' => $this->_module->translate(
				'NotificationHelperTestNotificationHandler Description'
			),
		);

		$this->assertEquals($expected, $handlers, 'Non Display');
	}

	public function testGetSubscriptions() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$userId = $gallery->getActiveUserId();

		$storage->setReply(
			'getMapEntry',
			array(
				'SubscriptionMap',
				array('notificationName', 'itemId'),
				array(
					'userId' => $gallery->getActiveUserId(),
				),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(
						array('Test::Event1', 4),
						array('Test::Event2', 5),
					)
				),
			)
		);

		list($ret, $events) = NotificationHelper::getSubscriptions($userId);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'Test::Event1' => array(4),
				'Test::Event2' => array(5),
			),
			$events,
			'UserId search'
		);

		$dummyItemId = 6;
		$storage->setReply(
			'getMapEntry',
			array(
				'SubscriptionMap',
				array('notificationName', 'itemId'),
				array(
					'userId' => $gallery->getActiveUserId(),
					'itemId' => $dummyItemId,
				),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(
						array('Test::Event1', 4),
						array('Test::Event2', 5),
					)
				),
			)
		);

		list($ret, $events) = NotificationHelper::getSubscriptions($userId, $dummyItemId);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'Test::Event1' => array(4),
				'Test::Event2' => array(5),
			),
			$events,
			'UserId and Item search'
		);
	}

	public function testGetActiveNotificationsHandlers() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$storage->setReply(
			'search',
			array(
				'
             SELECT DISTINCT [::notificationName], [::handlerName]
	      FROM [SubscriptionMap]
	     WHERE [::notificationName] IN (?)',
				array('Test::Event1'),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(array('Test::Event1', 'Test::EventHandler'))
				),
			)
		);

		list($ret, $handlerNames) = NotificationHelper::getActiveNotificationsHandlers(array('Test::Event1'));

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'Test::Event1' => array('Test::EventHandler'),
			),
			$handlerNames,
			'Unexpected notifications and handlers'
		);
	}

	public function testGetActiveSubscriptionsEvents() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$userId = $gallery->getActiveUserId();

		$storage->setReply(
			'search',
			array(
				'SELECT DISTINCT [::notificationName] FROM [SubscriptionMap]',
				array(),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(array('Test::Event1'), array('Test::Event2'))
				),
			)
		);

		list($ret, $events) = NotificationHelper::getActiveSubscriptionsEvents();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(array('Test::Event', 'Test::Event2'), $events, 'Unexpected events');
	}

	public function testSubscribe() {
		global $gallery;

		// Load the Implementation factories to cache
		list($ret) = GalleryCoreApi::getAllFactoryImplementationIds('GalleryEventListeners');

		if ($ret) {
			return $ret;
		}

		$storage =& $gallery->getStorage();

		$userId      = $gallery->getActiveUserId();
		$itemId      = $this->_album->getId();
		$eventId     = 'Test::Event';
		$handlerName = 'Test::Handler';

		list($ret, $hintLockId) = GalleryCoreApi::getPluginParameter(
			'module',
			'notification',
			'id.hintsLock'
		);

		if ($ret) {
			return $ret;
		}
		$storage->setReply(
			'acquireWriteLock',
			array(array($hintLockId), 10),
			array(
				null,
				array(
					'lockId' => 42,
					'type'   => LOCK_WRITE,
					'ids'    => array(
						$hintLockId => true,
					),
				),
			)
		);
		$storage->setReply('isTransactional', array(), false);
		$storage->setReply('releaseLocks', array(array(42)), null);
		$storage->setReply(
			'addMapEntry',
			array(
				'SubscriptionMap',
				array(
					'userId'           => $userId,
					'itemId'           => $itemId,
					'handlerName'      => $handlerName,
					'notificationName' => 'Test::Event1',
				),
				array(),
			),
			null
		);
		// The album might use some presort
		$storage->setReply('getFunctionSql', '*', array(null, ''), true);
		$storage->setReply('getFunctionSql', '*', array(null, ''), true);
		// The fetchChildItemIds() query
		$storage->setReply('search', '*', array(null, new UnitTestStorageSearchResults(array())));
		$storage->setReply('checkPoint', array(), null);

		$ret = NotificationHelper::subscribe(
			$userId,
			$this->_album,
			$eventId,
			'Test::Event1',
			$handlerName,
			true
		);

		if ($ret) {
			return $ret;
		}

		$this->assert($storage->isComplete(), $storage->getRemaining());
	}

	public function testSubscribeNonRecursive() {
		global $gallery;

		// Load the Implementation factories to cache
		list($ret) = GalleryCoreApi::getAllFactoryImplementationIds('GalleryEventListeners');

		if ($ret) {
			return $ret;
		}

		$storage =& $gallery->getStorage();

		$userId      = $gallery->getActiveUserId();
		$itemId      = $this->_album->getId();
		$eventId     = 'Test::Event';
		$handlerName = 'Test::Handler';

		list($ret, $hintLockId) = GalleryCoreApi::getPluginParameter(
			'module',
			'notification',
			'id.hintsLock'
		);

		if ($ret) {
			return $ret;
		}
		$storage->setReply(
			'acquireWriteLock',
			array(array($hintLockId), 10),
			array(
				null,
				array(
					'lockId' => 42,
					'type'   => LOCK_WRITE,
					'ids'    => array(
						$hintLockId => true,
					),
				),
			)
		);
		$storage->setReply('isTransactional', array(), false);
		$storage->setReply('releaseLocks', array(array(42)), null);
		$storage->setReply(
			'addMapEntry',
			array(
				'SubscriptionMap',
				array(
					'userId'           => $userId,
					'itemId'           => $itemId,
					'handlerName'      => $handlerName,
					'notificationName' => 'Test::Event1',
				),
				array(),
			),
			null
		);
		$storage->setReply('checkPoint', array(), null);

		$ret = NotificationHelper::subscribe(
			$userId,
			$this->_album,
			$eventId,
			'Test::Event1',
			$handlerName,
			false
		);

		if ($ret) {
			return $ret;
		}

		$this->assert($storage->isComplete(), $storage->getRemaining());
	}

	public function testUnsubscribe() {
		global $gallery;

		// Load the Implementation factories to cache
		list($ret) = GalleryCoreApi::getAllFactoryImplementationIds('GalleryEventListener');

		if ($ret) {
			return $ret;
		}

		$registry =& GalleryFactoryHelper_simple::_getSingleton();
		$registry['hints']['GalleryEventListener'][GalleryUtilities::strToLower('Test::Event')] = array(
			'NotificationRouter' => 'TestSubscriptionClass',
		);
		$registry['ids']['GalleryEventListener']['NotificationRouter']                          = 'TestSubscriptionClass';
		$registry['pluginIds']['GalleryEventListener']['TestSubscriptionClass']                 = 'notification';
		$registry['implementations']['GalleryEventListener']['TestSubscriptionClass']           = 'path';

		$storage =& $gallery->getStorage();

		$userId           = $gallery->getActiveUserId();
		$itemId           = $this->_album->getId();
		$notificationName = 'Test::Event';
		$handlerName      = 'Test::Handler';

		$getHints = serialize(null);
		$storage->setReply(
			'removeMapEntry',
			array(
				'SubscriptionMap',
				array(
					'userId'           => $userId,
					'itemId'           => $itemId,
					'notificationName' => $notificationName,
					'handlerId'        => $handlerName,
				),
			),
			null
		);

		// The album might use some presort
		$storage->setReply('getFunctionSql', '*', array(null, ''), true);
		$storage->setReply('getFunctionSql', '*', array(null, ''), true);
		// The fetchChildItemIds() query
		$storage->setReply('search', '*', array(null, new UnitTestStorageSearchResults(array())));
		list($ret, $hintLockId) = GalleryCoreApi::getPluginParameter(
			'module',
			'notification',
			'id.hintsLock'
		);

		if ($ret) {
			return $ret;
		}
		$storage->setReply(
			'acquireWriteLock',
			array(array($hintLockId), 10),
			array(
				null,
				array(
					'lockId' => 42,
					'type'   => LOCK_WRITE,
					'ids'    => array(
						$hintLockId => true,
					),
				),
			)
		);
		$storage->setReply(
			'search',
			array(
				'SELECT COUNT(*) FROM [SubscriptionMap]
		 WHERE [SubscriptionMap::notificationName] = ?',
				array($notificationName),
				array(),
			),
			array(null, new UnitTestStorageSearchResults(array(array(0))))
		);

		$storage->setReply(
			'updateMapEntry',
			array(
				'GalleryFactoryMap',
				array(
					'classType' => 'GalleryEventListener',
					'implId'    => 'NotificationRouter',
				),
				array(
					'hints' => serialize(null),
				),
				null,
			),
			null
		);
		$storage->setReply('isTransactional', array(), false);
		$storage->setReply('releaseLocks', array(array(42)), null);
		$storage->setReply('checkPoint', array(), null);

		$ret = NotificationHelper::unsubscribe(
			$userId,
			$itemId,
			'Test::Event',
			$notificationName,
			$handlerName,
			true
		);

		if ($ret) {
			return $ret;
		}

		$this->assert($storage->isComplete(), $storage->getRemaining());
	}

	public function testUnsubscribeNonRecursive() {
		global $gallery;

		// Load the Implementation factories to cache
		list($ret) = GalleryCoreApi::getAllFactoryImplementationIds('GalleryEventListener');

		if ($ret) {
			return $ret;
		}

		$registry =& GalleryFactoryHelper_simple::_getSingleton();
		$registry['hints']['GalleryEventListener'][GalleryUtilities::strToLower('Test::Event')] = array(
			'NotificationRouter' => 'TestSubscriptionClass',
		);
		$registry['ids']['GalleryEventListener']['NotificationRouter']                          = 'TestSubscriptionClass';
		$registry['pluginIds']['GalleryEventListener']['TestSubscriptionClass']                 = 'notification';
		$registry['implementations']['GalleryEventListener']['TestSubscriptionClass']           = 'path';

		$storage =& $gallery->getStorage();

		$userId           = $gallery->getActiveUserId();
		$itemId           = $this->_album->getId();
		$notificationName = 'Test::Event';
		$handlerName      = 'Test::Handler';

		$getHints = serialize(null);
		$storage->setReply(
			'removeMapEntry',
			array(
				'SubscriptionMap',
				array(
					'userId'           => $userId,
					'itemId'           => $itemId,
					'notificationName' => $notificationName,
					'handlerId'        => $handlerName,
				),
			),
			null
		);

		list($ret, $hintLockId) = GalleryCoreApi::getPluginParameter(
			'module',
			'notification',
			'id.hintsLock'
		);

		if ($ret) {
			return $ret;
		}
		$storage->setReply(
			'acquireWriteLock',
			array(array($hintLockId), 10),
			array(
				null,
				array(
					'lockId' => 42,
					'type'   => LOCK_WRITE,
					'ids'    => array(
						$hintLockId => true,
					),
				),
			)
		);
		$storage->setReply(
			'search',
			array(
				'SELECT COUNT(*) FROM [SubscriptionMap]
		 WHERE [SubscriptionMap::notificationName] = ?',
				array($notificationName),
				array(),
			),
			array(null, new UnitTestStorageSearchResults(array(array(0))))
		);

		$storage->setReply(
			'updateMapEntry',
			array(
				'GalleryFactoryMap',
				array(
					'classType' => 'GalleryEventListener',
					'implId'    => 'NotificationRouter',
				),
				array(
					'hints' => serialize(null),
				),
				null,
			),
			null
		);
		$storage->setReply('isTransactional', array(), false);
		$storage->setReply('releaseLocks', array(array(42)), null);
		$storage->setReply('checkPoint', array(), null);

		$ret = NotificationHelper::unsubscribe(
			$userId,
			$itemId,
			'Test::Event',
			$notificationName,
			$handlerName,
			false
		);

		if ($ret) {
			return $ret;
		}

		$this->assert($storage->isComplete(), $storage->getRemaining());
	}

	public function testFormatItemAddedMessage() {
		global $gallery;
		$storage      =& $gallery->getStorage();
		$urlGenerator =& $gallery->getUrlGenerator();

		list($ret, $module) = GalleryCoreApi::loadPlugin('module', 'notification');

		if ($ret) {
			return $ret;
		}

		$expected = $module->translate('Event Handler is required');

		$url   = $urlGenerator->generateUrl(
			array(
				'view'   => 'core.ShowItem',
				'itemId' => $this->_album->getId(),
			),
			array(
				'forceFullUrl'   => true,
				'forceSessionId' => false,
				'htmlEntities'   => false,
			)
		);
		$event = GalleryCoreApi::newEvent('Gallery::ItemAdded');
		$event->setData(array($this->_album));

		$notifier = new ItemAddedNotification();
		$notifier->setEvent($event);

		list($ret, $testMsg) = $notifier->getNotificationMessage();

		if ($ret) {
			return $ret;
		}

		$itemTypeName = $this->_album->itemTypeName();
		$itemTypeName = $itemTypeName[1];

		$msg = $module->translate(
			array(
				'arg1' => $itemTypeName,
				'arg2' => $url,
				'text' => "A new %s has been added. To view it, click here: \n%s",
			)
		);
		$this->assertEquals($msg, $testMsg, 'Single item not formatted propery');

		$event = GalleryCoreApi::newEvent('Gallery::ItemAdded');
		$event->setData(array($this->_item1, $this->_item2));

		$notifier = new ItemAddedNotification();
		$notifier->setEvent($event);

		$itemTypeName = $this->_item1->itemTypeName();
		$itemTypeName = $itemTypeName[1];

		$msg                 = $module->translate(
			array(
				'arg1' => $itemTypeName,
				'arg2' => $url,
				'text' => "A new %s has been added. To view it, click here: \n%s",
			)
		);
		list($ret, $testMsg) = $notifier->getNotificationMessage();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($msg, $testMsg, 'Multiple items not formatted propery');
	}

	public function testGetSubscribersItemEvent() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$userId  = $gallery->getActiveUserId();
		$itemId  = $this->_album->getId();
		$eventId = 'Test::Event';

		$storage->setReply(
			'getMapEntry',
			array(
				'SubscriptionMap',
				array('userId'),
				array(
					'notificationName' => 'Test::Event1',
					'itemId'           => $itemId,
				),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(
						array($userId),
						array($this->_user2->getId()),
					)
				),
			)
		);

		$notification = new NotificationHelperTestEvent();
		$event        = new GalleryEvent();
		$event->setEventName('Test::Event');
		$event->setData($itemId);
		$notification->setEvent($event);

		list($ret, $userList) = NotificationHelper::getSubscribers('Test::Event1', $notification);

		if ($ret) {
			return $ret;
		}

		// Although two userids have "subscribed" only one has the required permissions.
		$list = array($this->_user2->getId());
		$this->assertEquals($list, $userList, 'Unexpected user list');
	}

	public function testGetSubscribersGlobalEvent() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$userId  = $gallery->getActiveUserId();
		$itemId  = $this->_album->getId();
		$eventId = 'Test::GlobalEvent';

		$storage->setReply(
			'getMapEntry',
			array(
				'SubscriptionMap',
				array('userId'),
				array(
					'notificationName' => 'Test::GlobalEvent',
					'itemId'           => 0,
				),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(
						array($userId),
						array($this->_user2->getId()),
					)
				),
			)
		);
		$storage->setReply(
			'getMapEntry',
			array(
				'GalleryUserGroupMap',
				array('userId'),
				array(
					'userId'  => $userId,
					'groupId' => $this->_groupAdmin,
				),
				array(
					'limit' => array(
						'count' => 1,
					),
				),
			),
			array(null, new UnitTestStorageSearchResults(array()))
		);
		$storage->setReply(
			'getMapEntry',
			array(
				'GalleryUserGroupMap',
				array('userId'),
				array(
					'userId'  => $this->_user2->getId(),
					'groupId' => $this->_groupAdmin,
				),
				array(
					'limit' => array(
						'count' => 1,
					),
				),
			),
			array(null, new UnitTestStorageSearchResults(array(array($this->_user2->getId()))))
		);

		$notification = new NotificationHelperTestGlobalEvent();
		$event        = new GalleryEvent();
		$event->setEventName('Test::GlobalEvent');
		$event->setData($itemId);
		$notification->setEvent($event);

		list($ret, $userList) = NotificationHelper::getSubscribers('Test::GlobalEvent', $notification);

		if ($ret) {
			return $ret;
		}

		$list = array($this->_user2->getId());
		$this->assertEquals($list, $userList, 'Unexpected user list');
	}

	public function testGetSubscriberByItemId() {
		global $gallery;
		$storage =& $gallery->getStorage();

		$userId           = $gallery->getActiveUserId();
		$itemId           = 7;
		$notificationName = 'Test::Event';
		$list             = array(
			$notificationName => array(
				array($this->_user->getId(), 'Test::EventHandler'),
				array($userId, 'Test::EventHandler'),
			),
		);

		$storage->setReply(
			'getMapEntry',
			array(
				'SubscriptionMap',
				array('notificationName', 'userId', 'handlerName'),
				array(
					'itemId' => $itemId,
				),
				array(),
			),
			array(
				null,
				new UnitTestStorageSearchResults(
					array(
						array($notificationName, $this->_user->getId(), 'Test::EventHandler'),
						array($notificationName, $userId, 'Test::EventHandler'),
					)
				),
			)
		);

		list($ret, $subscriptions) = NotificationHelper::getSubscriberByEntityId($itemId);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals($list, $subscriptions, 'Unexpected subscription list');
	}
}

GalleryCoreApi::requireOnce('modules/notification/classes/NotificationEvent_1_0.class');

class NotificationHelperTestEvent extends NotificationEvent_1_0 {
	public function getDescription() {
		global $gallery;

		return $this->_translateText(
			'notification',
			$gallery->i18n('NotificationEventTest Description')
		);
	}

	public function getPermission() {
		return 'core.edit';
	}

	public function getEventSpecs() {
		return array(
			'eventName' => 'Test::Event',
		);
	}

	public function isAppropriateForItem($item) {
		return true;
	}

	public function getItemId() {
		return (int)$this->_event->getData();
	}
}

class NotificationHelperTestEvent2 extends NotificationEvent_1_0 {
	public function getDescription() {
		global $gallery;

		return $this->_translateText(
			'notification',
			$gallery->i18n('NotificationEventTest2 Description')
		);
	}

	public function getPermission() {
		return null;
	}

	public function getEventSpecs() {
		return array(
			'eventName' => 'Test::Event2',
		);
	}

	public function isAppropriateForItem($item) {
		return true;
	}
}

class NotificationHelperTestGlobalEvent extends NotificationEvent_1_0 {
	public function getDescription() {
		global $gallery;

		return $this->_translateText(
			'notification',
			$gallery->i18n('NotificationHelperTestGlobalEvent Description')
		);
	}

	public function getPermission() {
		return null;
	}

	public function getEventSpecs() {
		return array(
			'eventName' => 'Test::GlobalEvent',
		);
	}

	public function isAppropriateForItem($item) {
		return false;
	}

	public function isGlobal() {
		return true;
	}
}

GalleryCoreApi::requireOnce('modules/notification/classes/NotificationHandler_1_0.class');

class NotificationHelperTestNotificationHandler extends NotificationHandler_1_0 {
	public function getDescription() {
		global $gallery;

		return $this->_translateText(
			'notification',
			$gallery->i18n('NotificationHelperTestNotificationHandler Description')
		);
	}

	public function getPermission() {
		return 'core.view';
	}

	public function setEvent($event) {
		$this->_event = $event;
	}

	public function getEvent() {
		return $this->_event;
	}

	public function getItemId() {
		return (int)$this->_event->_data;
	}

	public function getNotificationMessage() {
		return $this->_message;
	}
}

class NotificationHelperTestNotificationHandlerNew extends NotificationHandler_1_0 {
	public function getDescription() {
		global $gallery;

		return $this->_translateText(
			'notification',
			$gallery->i18n('NotificationHelperTestNotificationHandler New Description')
		);
	}

	public function getPermission() {
		return 'core.view';
	}

	public function setEvent($event) {
		$this->_event = $event;
	}

	public function getEvent() {
		return $this->_event;
	}

	public function getItemId() {
		return (int)$this->_event->_data;
	}

	public function getNotificationMessage() {
		return $this->_message;
	}
}

class NotificationHelperTestEventHandler // extends GalleryEventListener
{
	/**
	 * @see GalleryEventListener::handleEvent
	 */
	public function handleEvent($event) {
		return array(null, null);
	}
}

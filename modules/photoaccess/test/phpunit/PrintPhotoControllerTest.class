<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test PhotoAccess cart functionality
 *
 * @package PhotoAccess
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class PrintPhotoControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'photoaccess.PrintPhoto');
	}

	public function setUp() {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Control the user agent; we pass this to PhotoAccess
		$_SERVER['HTTP_USER_AGENT'] = 'Test User Agent';
		$_SERVER['HTTP_REFERER']    = 'TestHttpReferer';

		// Create some random photo items that we can print
		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			echo $ret->getAsHtml();

			return $ret;
		}

		$this->_markForCleanup($this->_album);

		/*
		 * Create a new item and force it to be a GalleryPhotoItem, cause that's the only type
		 * that this plugin will print.  Make it an unsupported mime type so that no graphics
		 * toolkits will get involved.
		 */
		list($ret, $this->_photo) = $this->_createRandomDataItem(
			$this->_album->getId(),
			'test/jpeg',
			array(),
			__FILE__,
			'GalleryPhotoItem'
		);

		if ($ret) {
			echo $ret->getAsHtml();

			return $ret;
		}

		// Create a stub thumbnail
		list($ret, $derivative) = GalleryCoreApi::newFactoryInstanceByHint(
			'GalleryDerivative',
			$this->_photo->getEntityType()
		);

		if ($ret) {
			return $ret;
		}

		$ret = $derivative->create($this->_photo->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);

		if ($ret) {
			return $ret;
		}

		$derivative->setDerivativeSourceId($this->_photo->getId());
		$derivative->setDerivativeOperations('thumbnail|150');
		$derivative->setMimeType('test/file');

		$ret = $derivative->save();

		if ($ret) {
			return $ret;
		}

		// Ensure we have print permission
		$ret = GalleryCoreApi::removeItemPermissions($this->_photo->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_photo->getId(),
			$gallery->getActiveUserId(),
			'core.all'
		);

		if ($ret) {
			return $ret;
		}

		/*
		 * Save the thumb and source ids for the test platform so that it can verify that
		 * the right post data goes through.
		 */
		$this->_thumbId  = $derivative->getId();
		$this->_sourceId = $this->_photo->getId();

		$storage =& $gallery->getStorage();
		$ret     = $storage->checkPoint();

		if ($ret) {
			return $ret;
		}

		// Empty out the plugin session id
		$session                    =& $gallery->getSession();
		$this->_saveCartUrlFragment = $session->get('photoaccess.cartUrlFragment');
		$session->remove('photoaccess.cartUrlFragment');

		// Make sure translate calls during test won't generate any platform calls
		list($ret) = GalleryCoreApi::getPermissionIds();

		if ($ret) {
			return $ret;
		}

		// Swap in a dummy url generator
		$gallery->_urlGenerator = new PrintPhotoControllerTestUrlGenerator();
	}

	public function tearDown() {
		global $gallery;

		// Restore session id
		$session =& $gallery->getSession();

		if (isset($this->_saveCartUrlFragment)) {
			$session->put('photoaccess.cartUrlFragment', $this->_saveCartUrlFragment);
		} else {
			$session->remove('photoaccess.cartUrlFragment');
		}

		$ret = parent::tearDown();

		if ($ret) {
			return $ret;
		}
	}

	public function &_getTestPlatform($fragment, $requestUrl, $redirectUrl) {
		$platform = new UnitTestPlatform();
		$platform->setReply('fsockopen', array('www.photoworks.com', 80, '', '', 5), 'testFd');
		$platform->setReply(
			'fwrite',
			array(
				'testFd',
				'fuzzy' => "{POST /sbo/$fragment HTTP/1\.0}",
				'',
			),
			100
		);
		$platform->setReply('fflush', array('testFd'), true);
		$platform->setReply('fgets', array('testFd', 4096), 'HTTP/1.1 200 OK');
		$platform->setReply('feof', array('testFd'), false);
		$platform->setReply('fgets', array('testFd', 4096), '');
		$platform->setReply('feof', array('testFd'), false);
		$platform->setReply(
			'fread',
			array('testFd', 4096),
			'<add-cart-response request-url="' .
			$requestUrl . '" redirect-url="' . $redirectUrl . '"/>'
		);
		$platform->setReply('feof', array('testFd'), true);
		$platform->setReply('fclose', array('testFd'), true);

		return $platform;
	}

	public function testPrintPhoto() {
		global $gallery;
		$gallery->setPlatform(
			$this->_getTestPlatform('anonCartXML.jsp', '/REQUEST_URL', '/REDIRECT_URL')
		);

		GalleryUtilities::putRequestVariable('itemId', $this->_photo->getId());
		GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

		// Perform the request and verify that we succeeded
		$results      = $this->handleRequest();
		$expectedHref = 'http://www.photoworks.com/REDIRECT_URL';
		$this->assertEquals(
			array(
				'redirect' => array(
					'href' => $expectedHref,
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$session =& $gallery->getSession();
		$this->assertEquals('/REQUEST_URL', $session->get('photoaccess.cartUrlFragment'));
	}

	public function testPrintSecondPhoto() {
		global $gallery;
		$gallery->setPlatform(
			$this->_getTestPlatform(
				'EXISTING_FRAGMENT',
				'/REQUEST_URL2?foo=1&#38;bar=2',
				'/REDIRECT_URL2?foo=1&#38;bar=2'
			)
		);

		GalleryUtilities::putRequestVariable('itemId', $this->_photo->getId());
		GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

		$session =& $gallery->getSession();
		$session->put('photoaccess.cartUrlFragment', '/sbo/EXISTING_FRAGMENT');

		// Perform the request and verify that we succeeded
		$results      = $this->handleRequest();
		$expectedHref = 'http://www.photoworks.com/REDIRECT_URL2?foo=1&bar=2';
		$this->assertEquals(
			array(
				'redirect' => array(
					'href' => $expectedHref,
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$this->assertEquals(
			'/REQUEST_URL2?foo=1&bar=2',
			$session->get('photoaccess.cartUrlFragment')
		);
	}

	public function testPrintProtectedPhoto() {
		global $gallery;

		$itemId = $this->_photo->getId();
		GalleryUtilities::putRequestVariable('itemId', $itemId);
		GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

		// We only have permission to print and view the thumbnail
		$ret = GalleryCoreApi::removeItemPermissions($itemId);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission(
			$itemId,
			$gallery->getActiveUserId(),
			'photoaccess.print'
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::addUserPermission(
			$itemId,
			$gallery->getActiveUserId(),
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		// Make sure we don't get any platform calls during test from releasing flock locks
		$storage =& $gallery->getStorage();
		$ret     = $storage->checkPoint();

		if ($ret) {
			return $ret;
		}

		$gallery->setPlatform(
			$this->_getTestPlatform('anonCartXML.jsp', '/REQUEST_URL', '/REDIRECT_URL')
		);

		// Perform the request and verify that we succeeded
		$results      = $this->handleRequest();
		$expectedHref = 'http://www.photoworks.com/REDIRECT_URL';
		$this->assertEquals(
			array(
				'redirect' => array(
					'href' => $expectedHref,
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$session =& $gallery->getSession();
		$this->assertEquals('/REQUEST_URL', $session->get('photoaccess.cartUrlFragment'));

		// Get the session id that we passed to PhotoWorks

		$written = $gallery->_platform->getCalled('fwrite');
		$content = urldecode($written[0][1]);


		$sessionVar = $session->getKey();
		preg_match_all(
			"#url=\"view=core.DownloadItem.*?$sessionVar=(.*?)\"#",
			$content,
			$matches
		);
		$photoaccessSessionId = $matches[1][0];

		$_COOKIE[SESSION_ID_PARAMETER] = $photoaccessSessionId;
		$photoaccessSession            = new GallerySession();
		$ret                           = $photoaccessSession->init();

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array($itemId, $this->_thumbId),
			$photoaccessSession->get('core.isPrintService'),
			'Photoaccess session missing item id'
		);
	}
}

/**
 * Mock url generator for this test
 *
 * @package PhotoAccess
 * @subpackage PHPUnit
 */
class PrintPhotoControllerTestUrlGenerator extends GalleryUrlGenerator {
	public function generateUrl($params = array(), $options = array()) {
		$lines = array();

		foreach ($params as $key => $value) {
			$lines[] = "$key=$value";
		}

		return implode('/', $lines);
	}
}

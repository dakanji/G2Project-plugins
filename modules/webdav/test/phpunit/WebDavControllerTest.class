<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/webdav/classes/WebDavHelper.class');

/**
 * WebDAV Controller tests.
 * @package WebDav
 * @subpackage PHPUnit
 * @author Andy Staudacher <ast@gmx>
 * @version $Revision: 17580 $
 */
class WebDavControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'webdav.WebDav');
	}

	public function testRequireAuthForAllRequestsByWindowsWebfolders() {
		// See bug 1645834
		$this->_becomeGuestUser();

		foreach (array(
			'Microsoft Data Access Internet Publishing Provider DAV foo bar',
			'Microsoft-WebDAV-MiniRedir/5.1.2600',
		) as $userAgent) {
			$_SERVER['HTTP_USER_AGENT'] = $userAgent;

			foreach (array(
				'options',
				'propfind',
				'proppatch',
				'mkcol',
				'delete',
				'move',
				'lock',
				'unlock',
				'put',
				'get',
				'head',
			) as $requestMethod) {
				$_SERVER['REQUEST_METHOD'] = $requestMethod;

				$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
				$this->assertEquals(
					null,
					$results,
					"User-Agent: $userAgent, Request-Method: $requestMethod"
				);
			}
		}
	}

	public function testNoAuthRequestForLoggedInUsersForRequestsByWindowsWebfolders() {
		$_SERVER['REQUEST_METHOD']  = 'propfind';
		$_SERVER['HTTP_USER_AGENT'] = 'Microsoft Data Access Internet Publishing Provider DAV foo bar';

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'webdav.WebDav',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testNoAuthRequiredForOtherClients() {
		$_SERVER['REQUEST_METHOD']  = 'propfind';
		$_SERVER['HTTP_USER_AGENT'] = 'SOME USER AGENT STRING';
		$this->_becomeGuestUser();

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'webdav.WebDav',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testSpecialCharactersInFileName() {
		$_SERVER['REQUEST_METHOD']  = 'propfind';
		$_SERVER['HTTP_USER_AGENT'] = 'SOME USER AGENT STRING';

		GalleryUtilities::putRequestVariable('path', '@dir/Black&White');

		$results      = $this->handleRequest();
		$originalPath = GalleryUtilities::getRequestVariables('originalPath');
		$path         = GalleryUtilities::getRequestVariables('path');
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'webdav.WebDav',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$this->assertEquals('@dir/Black&amp;White', $originalPath, 'Unexpected Original Path');
		$this->assertEquals('_dir/Black_White', $path, 'Unexpected New Path');
	}
}

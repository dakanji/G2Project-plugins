<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/thumbnail/classes/ThumbnailHelper.class');

/**
 * ThumbnailSiteAdmin controller tests
 * Also tests ThumbnailHelper::fetchMimeTypeMap()
 *
 * @package Thumbnail
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ThumbnailSiteAdminControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'thumbnail.ThumbnailSiteAdmin');
	}

	public function testThumbnailSiteAdminControllerAddNoMime() {
		GalleryUtilities::putRequestVariable('form[action][add]', '1');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'mime_error' => 1,
				),
				'error' => array(),
			),
			$results
		);
	}

	public function testThumbnailSiteAdminControllerAddNoFile() {
		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[mimeType]', 'test/fakemime');
		GalleryUtilities::putRequestVariable('form[image]', 'new');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'file_error' => 1,
				),
				'error' => array(),
			),
			$results
		);
	}

	public function testThumbnailSiteAdminControllerAddBadMime() {
		list($ret, $toolkit, $outputMimeType) = GalleryCoreApi::getToolkitByOperation('image/gif', 'thumbnail');

		if ($ret) {
			return $ret;
		}

		if (!isset($toolkit)) {
			echo '<b>Warning</b>: testThumbnailSiteAdminControllerAddBadMime requires an active ' .
			'graphics toolkit.. test skipped.<br/>';

			return;
		}

		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[mimeType]', 'image/gif');
		GalleryUtilities::putRequestVariable('form[image]', 'new');
		GalleryUtilities::putRequestVariable('form[name][1]', 'test.jpg');
		GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
		GalleryUtilities::putRequestVariable(
			'form[tmp_name][1]',
			GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.jpg')
		);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'mime_duplicate' => 1,
				),
				'error' => array(),
			),
			$results,
			'Add core mime type'
		);

		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[mimeType]', 'test/fakemime');
		GalleryUtilities::putRequestVariable('form[image]', 'new');
		GalleryUtilities::putRequestVariable('form[name][1]', 'test.gif');
		GalleryUtilities::putRequestVariable('form[type][1]', 'image/gif');
		GalleryUtilities::putRequestVariable(
			'form[tmp_name][1]',
			GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.gif')
		);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'imagemime_error' => 1,
				),
				'error' => array(),
			),
			$results,
			'Add non-jpeg image'
		);
	}

	public function testThumbnailSiteAdminControllerAddDelete() {
		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[mimeType]', 'test/fakemime');
		GalleryUtilities::putRequestVariable('form[image]', 'new');
		GalleryUtilities::putRequestVariable('form[name][1]', 'test.jpg');
		GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
		GalleryUtilities::putRequestVariable(
			'form[tmp_name][1]',
			GalleryCoreApi::getCodeBasePath('modules/core/test/data/test1.jpg')
		);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'add' => 1,
				),
				'error' => array(),
			),
			$results,
			'Add new'
		);

		list($ret, $toolkit, $outputMimeType) = GalleryCoreApi::getToolkitByOperation('test/fakemime', 'thumbnail');

		if ($ret) {
			return $ret;
		}
		$this->assert(GalleryUtilities::isA($toolkit, 'ThumbnailToolkit'), 'Toolkit');

		list($ret, $mimeMap) = ThumbnailHelper::fetchMimeTypeMap();

		if ($ret) {
			return $ret;
		}
		$this->assert(isset($mimeMap['test/fakemime']), 'Map entry not found after add');
		$itemId = $mimeMap['test/fakemime'];

		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][add]', '1');
		GalleryUtilities::putRequestVariable('form[mimeType]', 'test/fakemime2');
		GalleryUtilities::putRequestVariable('form[image]', 'old');
		GalleryUtilities::putRequestVariable('form[oldimage]', $itemId);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'addMime' => 1,
				),
				'error' => array(),
			),
			$results,
			'Add mime type to existing image'
		);

		list($ret, $toolkit, $outputMimeType) = GalleryCoreApi::getToolkitByOperation('test/fakemime2', 'thumbnail');

		if ($ret) {
			return $ret;
		}
		$this->assert(GalleryUtilities::isA($toolkit, 'ThumbnailToolkit'), 'Toolkit');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'mime_duplicate' => 1,
				),
				'error' => array(),
			),
			$results,
			'Add duplicate mime type'
		);

		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][delete]', '1');
		GalleryUtilities::putRequestVariable('form[delete][itemId]', $itemId);
		GalleryUtilities::putRequestVariable('form[delete][mimeType]', 'test/fakemime');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'deleteMime' => 1,
				),
				'error' => array(),
			),
			$results,
			'Delete mime type entry'
		);

		list($ret, $mimeMap) = ThumbnailHelper::fetchMimeTypeMap();

		if ($ret) {
			return $ret;
		}
		$this->assert(!isset($mimeMap['test/fakemime']), 'Map entry still found after delete');
		$this->assert(isset($mimeMap['test/fakemime2']), 'Map entry not found after delete');
		$this->assertEquals($itemId, $mimeMap['test/fakemime2'], 'Wrong map id');

		list($ret, $toolkit, $outputMimeType) = GalleryCoreApi::getToolkitByOperation('test/fakemime', 'thumbnail');

		if ($ret) {
			return $ret;
		}
		$this->assert(!isset($toolkit), 'Toolkit should not be found');

		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('form[action][delete]', '1');
		GalleryUtilities::putRequestVariable('form[delete][itemId]', $itemId);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'thumbnail.ThumbnailSiteAdmin',
				),
				'status' => array(
					'delete' => 1,
				),
				'error' => array(),
			),
			$results,
			'Delete image'
		);

		list($ret, $mimeMap) = ThumbnailHelper::fetchMimeTypeMap();

		if ($ret) {
			return $ret;
		}
		$this->assert(!isset($mimeMap['test/fakemime']), 'Map entry still found after delete');
		$this->assert(!isset($mimeMap['test/fakemime2']), 'Map entry still found after delete');

		list($ret, $toolkit, $outputMimeType) = GalleryCoreApi::getToolkitByOperation('test/fakemime2', 'thumbnail');

		if ($ret) {
			return $ret;
		}
		$this->assert(!isset($toolkit), 'Toolkit should not be found');
	}
}

<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/customfield/classes/CustomFieldHelper.class');

/**
 * CustomFieldItemAdmin controller tests
 * @package CustomField
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class CustomFieldItemAdminControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'customfield.CustomFieldItemAdmin');
	}

	public function setUp() {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_album);

		list($ret, $this->_item) = $this->_createRandomDataItem(
			$this->_album->getId(),
			'image/test',
			array(),
			__FILE__,
			'GalleryPhotoItem'
		);

		if ($ret) {
			return $ret;
		}

		$ret = $this->_markPluginParametersForCleanup('module', 'customfield');

		if ($ret) {
			return $ret;
		}

		$ret = CustomFieldHelper::saveParameters(
			array(
				'common' => array(
					array(
						'field'   => 'Catalog Id',
						'summary' => false,
						'detail'  => true,
						'choices' => array(),
					),
				),
				'album'  => array(),
				'photo'  => array(
					array(
						'field'   => 'Location',
						'summary' => true,
						'detail'  => true,
						'choices' => array(),
					),
					array(
						'field'   => 'Category',
						'summary' => false,
						'detail'  => false,
						'choices' => array('A', 'B'),
					),
				),
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = CustomFieldHelper::saveFieldValues(
			$this->_item,
			array(
				'Catalog Id' => 'A2',
				'Category'   => 'A',
			)
		);

		if ($ret) {
			return $ret;
		}
	}

	public function testCustomFieldItemAdminController() {
		global $gallery;
		$session =& $gallery->getSession();

		// Activate album-specific settings..
		GalleryUtilities::putRequestVariable('cfAdmin', '2');
		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'return' => 1,
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Activate album-specific'
		);

		// Check values are retained..
		list($ret, $data, $tmp, $isContainer) = CustomFieldHelper::fetchFieldValues(array($this->_item));

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(
			array(
				'Catalog Id' => 'A2',
				'Category'   => 'A',
			),
			$data[$this->_item->getId()],
			'Field values'
		);
		$this->assertEquals(true, $isContainer[$this->_item->getId()], 'Album-specific settings');

		// Check adminMode in session..
		$adminMode = $session->get(CUSTOM_FIELD_SESSION_KEY);
		$this->assertEquals($this->_album->getId(), $adminMode, 'Session admin mode');

		// Change admin mode..
		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('cfAdmin', '-1');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'return' => 1,
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Switch to edit-values'
		);
		$adminMode = $session->get(CUSTOM_FIELD_SESSION_KEY);
		$this->assertEquals(null, $adminMode, 'Session admin mode');

		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('cfAdmin', '1');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'return' => 1,
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Switch to edit-settings'
		);
		$adminMode = $session->get(CUSTOM_FIELD_SESSION_KEY);
		$this->assertEquals($this->_album->getId(), $adminMode, 'Session admin mode');

		// Set values..
		$ret = CustomFieldHelper::saveFieldValues(
			$this->_item,
			array(
				'Catalog Id' => 'A3',
				'Category'   => 'B',
				'Dummy'      => 'X',
			)
		);

		if ($ret) {
			return $ret;
		}

		// Revert to global settings..
		GalleryUtilities::removeFormVariables('form');
		GalleryUtilities::putRequestVariable('cfAdmin', '-2');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'return' => 1,
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Revert to global-settings'
		);

		// Check values..
		list($ret, $data, $tmp, $isContainer) = CustomFieldHelper::fetchFieldValues(array($this->_item));

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(
			array(
				'Catalog Id' => 'A3',
				'Category'   => 'B',
			),
			$data[$this->_item->getId()],
			'Field values'
		);
		$this->assertEquals(false, $isContainer[$this->_item->getId()], 'Global settings');
	}
}

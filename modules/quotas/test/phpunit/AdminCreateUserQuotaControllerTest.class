<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * AdminCreateUserQuota controller tests
 * @package Quotas
 * @subpackage PHPUnit
 * @author Robert Balousek <volksport@users.sf.net>
 * @version $Revision: 17580 $
 */
class AdminCreateUserQuotaControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'quotas.AdminCreateUserQuota');
	}

	public function setUp() {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Create a user to add a quota to
		list($ret, $this->_user) = $this->_createRandomUser();

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_user);
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('userId', $this->_user->getId());
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminQuotas',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
	}

	public function testCreateUserQuota() {
		GalleryUtilities::putRequestVariable('form[action][create]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
		GalleryUtilities::putRequestVariable('form[quotaSize]', 2048);
		GalleryUtilities::putRequestVariable('form[quotaUnit]', 'KB');
		GalleryUtilities::putRequestVariable('userId', $this->_user->getId());

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminQuotas',
				),
				'status'   => array(
					'createdUser' => $this->_user->getUserName(),
				),
				'error'    => array(),
			),
			$results
		);
		$this->_deleteUserQuota($this->_user->getId());
	}

	public function testCreateUserQuotaMissingValues() {
		// No Values
		GalleryUtilities::putRequestVariable('form[action][create]', 1);
		GalleryUtilities::putRequestVariable('userId', $this->_user->getId());

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminCreateUserQuota',
				),
				'status'   => array(),
				'error'    => array(
					'form[error][quotaSize][missing]',
					'form[error][quotaUnit][missing]',
				),
			),
			$results
		);

		// quota size
		GalleryUtilities::putRequestVariable('form[quotaSize]', 2048);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminCreateUserQuota',
				),
				'status'   => array(),
				'error'    => array('form[error][quotaUnit][missing]'),
			),
			$results
		);

		// quota unit only
		GalleryUtilities::removeRequestVariable('form[quotaSize]');
		GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminCreateUserQuota',
				),
				'status'   => array(),
				'error'    => array('form[error][quotaSize][missing]'),
			),
			$results
		);
	}

	public function testCreateUserQuotaUserIdMissing() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		$results = $this->handleRequest(ERROR_BAD_PARAMETER);
	}

	public function testCreateUserQuotaDuplicateQuota() {
		GalleryUtilities::putRequestVariable('form[action][create]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
		GalleryUtilities::putRequestVariable('form[quotaSize]', 2048);
		GalleryUtilities::putRequestVariable('form[quotaUnit]', 'KB');
		GalleryUtilities::putRequestVariable('userId', $this->_user->getId());

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminQuotas',
				),
				'status'   => array(
					'createdUser' => $this->_user->getUserName(),
				),
				'error'    => array(),
			),
			$results
		);

		// Attempt to create a quota for the user that already has one
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminCreateUserQuota',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$this->_deleteUserQuota($this->_user->getId());
	}

	public function _createUserQuota($userId, $quota) {
		$ret = GalleryCoreApi::addMapEntry(
			'QuotasMap',
			array(
				'userOrGroupId' => $userId,
				'quotaSize'     => $quota,
			)
		);

		if ($ret) {
			return $ret;
		}
	}

	public function _deleteUserQuota($userId) {
		$ret = GalleryCoreApi::removeMapEntry(
			'QuotasMap',
			array(
				'userOrGroupId' => $userId,
			)
		);

		if ($ret) {
			return $ret;
		}
	}
}

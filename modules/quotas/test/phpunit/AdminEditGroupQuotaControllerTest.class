<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/quotas/classes/GalleryQuotasHelper.class');

/**
 * AdminEditGroupQuota controller tests
 * @package Quotas
 * @subpackage PHPUnit
 * @author Robert Balousek <volksport@users.sf.net>
 * @version $Revision: 17580 $
 */
class AdminEditGroupQuotaControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'quotas.AdminEditGroupQuota');
	}

	public function testCancel() {
		list($ret, $group) = $this->_createRandomGroup();

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('groupId', $group->getId());
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminQuotas',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);
		$this->_deleteEntity($group);
	}

	public function testUndo() {
		list($ret, $group) = $this->_createRandomGroup();

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('groupId', $group->getId());
		GalleryUtilities::putRequestVariable('form[action][undo]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminEditGroupQuota',
					'groupId' => $group->getId(),
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$this->_deleteEntity($group);
	}

	public function testEditGroupQuota() {
		list($ret, $group) = $this->_createRandomGroup();

		if ($ret) {
			return $ret;
		}

		$this->_createGroupQuota($group->getId(), 4096);

		GalleryUtilities::putRequestVariable('groupId', $group->getId());
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[groupName]', $group->getGroupName());
		GalleryUtilities::putRequestVariable('form[quotaSize]', 6);
		GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminQuotas',
				),
				'status'   => array(
					'modifiedGroup' => $group->getGroupName(),
				),
				'error'    => array(),
			),
			$results
		);

		list($ret, $quotaExists, $groupQuota) = GalleryQuotasHelper::fetchGroupQuota($group->getId());

		if ($ret) {
			return $ret;
		}
		$this->assert($quotaExists, 'Quota does not exist');
		$this->assertEquals($group->getId(), $groupQuota['id'], 'Group Ids do not match');
		$this->assertEquals(6144, $groupQuota['quota'], 'Group quota does not match');

		$this->_deleteGroupQuota($group->getId());
		$this->_deleteEntity($group);
	}

	public function testEditGroupQuotaMissingValues() {
		// No Values
		GalleryUtilities::putRequestVariable('form[action][save]', 1);

		$results = $this->handleRequest(ERROR_BAD_PARAMETER);

		// Create a group for our tests
		list($ret, $group) = $this->_createRandomGroup();

		if ($ret) {
			return $ret;
		}

		$this->_createGroupQuota($group->getId(), 1024);

		// quota size
		GalleryUtilities::putRequestVariable('groupId', $group->getId());
		GalleryUtilities::putRequestVariable('form[quotaSize]', 2048);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminEditGroupQuota',
				),
				'status'   => array(),
				'error'    => array('form[error][quotaUnit][missing]'),
			),
			$results
		);

		// quota unit only
		GalleryUtilities::removeRequestVariable('form[quotaSize]');
		GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminEditGroupQuota',
				),
				'status'   => array(),
				'error'    => array('form[error][quotaSize][missing]'),
			),
			$results
		);

		$this->_deleteGroupQuota($group->getId());
		$this->_deleteEntity($group);
	}

	/**
	 * Edit a non-existant group quota
	 */
	public function testEditGroupQuotaNonExistantQuota() {
		// Create a group, but no quota for it
		list($ret, $group) = $this->_createRandomGroup();

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('groupId', $group->getId());
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[groupName]', $group->getGroupName());
		GalleryUtilities::putRequestVariable('form[quotaSize]', 7);
		GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

		$results = $this->handleRequest();

		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'quotas.AdminEditGroupQuota',
				),
				'status'   => array(),
				'error'    => array(),
			),
			$results
		);

		$this->_deleteEntity($group);
	}

	public function testEditGroupQuotaGroupIdMissing() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		$results = $this->handleRequest(ERROR_BAD_PARAMETER);
	}

	public function _createGroupQuota($groupId, $quota) {
		$ret = GalleryCoreApi::addMapEntry(
			'QuotasMap',
			array(
				'userOrGroupId' => $groupId,
				'quotaSize'     => $quota,
			)
		);

		if ($ret) {
			return $ret;
		}
	}

	public function _deleteEntity($entity) {
		$ret = GalleryCoreApi::deleteEntityById($entity->getId(), $entity->getEntityType());

		if ($ret) {
			return $ret;
		}
	}

	public function _deleteGroupQuota($groupId) {
		$ret = GalleryCoreApi::removeMapEntry(
			'QuotasMap',
			array(
				'userOrGroupId' => $groupId,
			)
		);

		if ($ret) {
			return $ret;
		}
	}
}
